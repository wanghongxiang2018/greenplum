#
# PostgreSQL top level makefile
#
# $PostgreSQL: pgsql/GNUmakefile.in,v 1.58 2010/03/30 00:10:46 petere Exp $
#

subdir =
top_builddir = .
include $(top_builddir)/src/Makefile.global


all:
	$(MAKE) -C src all
	$(MAKE) -C config all
	$(MAKE) -C contrib/xlogdump all
	$(MAKE) -C contrib/formatter all
	$(MAKE) -C contrib/formatter_fixedwidth all
	$(MAKE) -C contrib/fuzzystrmatch all
	$(MAKE) -C contrib/extprotocol all	
	$(MAKE) -C contrib/dblink all
	$(MAKE) -C contrib/gp_sparse_vector all
	$(MAKE) -C contrib/gp_distribution_policy all
	$(MAKE) -C contrib/gp_inject_fault all
	$(MAKE) -C contrib/gp_internal_tools all
	$(MAKE) -C contrib/gp_cancel_query all
	$(MAKE) -C contrib/indexscan all
	$(MAKE) -C contrib/pg_upgrade_support all
	$(MAKE) -C contrib/pg_upgrade all
	$(MAKE) -C contrib/hstore all
	$(MAKE) -C contrib/pgcrypto all
	$(MAKE) -C gpAux/extensions all
	$(MAKE) -C gpAux/gpperfmon all
	$(MAKE) -C gpAux/platform all
	$(MAKE) -C gpMgmt all
	@echo "All of Greenplum Database successfully made. Ready to install."

docs:
	$(MAKE) -C doc all

world:
	$(MAKE) -C doc all
	$(MAKE) -C src all
	$(MAKE) -C config all
	$(MAKE) -C contrib all
	@echo "PostgreSQL, contrib, and documentation successfully made. Ready to install."

html man:
	$(MAKE) -C doc $@

install:
	$(MAKE) -C src $@
	$(MAKE) -C config $@
	$(MAKE) -C contrib/xlogdump $@
	$(MAKE) -C contrib/formatter $@
	$(MAKE) -C contrib/formatter_fixedwidth $@
	$(MAKE) -C contrib/fuzzystrmatch $@
	$(MAKE) -C contrib/extprotocol $@
	$(MAKE) -C contrib/dblink $@
	$(MAKE) -C contrib/gp_sparse_vector $@
	$(MAKE) -C contrib/gp_distribution_policy $@
	$(MAKE) -C contrib/gp_inject_fault $@
	$(MAKE) -C contrib/gp_internal_tools $@
	$(MAKE) -C contrib/gp_cancel_query $@
	$(MAKE) -C contrib/indexscan $@ 
	$(MAKE) -C contrib/pg_upgrade_support $@
	$(MAKE) -C contrib/pg_upgrade $@
	$(MAKE) -C contrib/hstore $@
	$(MAKE) -C contrib/pgcrypto $@
	$(MAKE) -C gpMgmt $@
	$(MAKE) -C gpAux/extensions $@
	$(MAKE) -C gpAux/gpperfmon $@
	$(MAKE) -C gpAux/platform $@
	@echo "Greenplum Database installation complete."

install-docs:
	$(MAKE) -C doc install

install-world:
	$(MAKE) -C doc install
	$(MAKE) -C src install
	$(MAKE) -C config install
	$(MAKE) -C contrib install
	@echo "PostgreSQL, contrib, and documentation installation complete."

installdirs uninstall coverage:
#	$(MAKE) -C doc $@
	$(MAKE) -C src $@
	$(MAKE) -C config $@
	$(MAKE) -C contrib/xlogdump $@
	$(MAKE) -C contrib/formatter $@
	$(MAKE) -C contrib/formatter_fixedwidth $@
	$(MAKE) -C contrib/fuzzystrmatch $@
	$(MAKE) -C contrib/extprotocol $@
	$(MAKE) -C contrib/dblink $@
	$(MAKE) -C contrib/gp_sparse_vector $@
	$(MAKE) -C contrib/gp_distribution_policy $@
	$(MAKE) -C contrib/gp_inject_fault $@
	$(MAKE) -C contrib/gp_internal_tools $@
	$(MAKE) -C contrib/gp_cancel_query $@
	$(MAKE) -C contrib/indexscan $@ 
	$(MAKE) -C contrib/pg_upgrade_support $@
	$(MAKE) -C contrib/pg_upgrade $@
	$(MAKE) -C contrib/hstore $@
	$(MAKE) -C contrib/pgcrypto $@

distprep:
#	$(MAKE) -C doc $@
	$(MAKE) -C src $@
	$(MAKE) -C config $@
	$(MAKE) -C contrib $@

# clean, distclean, etc should apply to contrib too, even though
# it's not built by default
clean:
#	$(MAKE) -C doc $@
	$(MAKE) -C contrib $@
	$(MAKE) -C src $@
	$(MAKE) -C config $@
	$(MAKE) -C contrib/xlogdump $@
	$(MAKE) -C contrib/formatter $@
	$(MAKE) -C contrib/formatter_fixedwidth $@
	$(MAKE) -C contrib/fuzzystrmatch $@
	$(MAKE) -C contrib/extprotocol $@
	$(MAKE) -C contrib/dblink $@
	$(MAKE) -C contrib/gp_sparse_vector $@
	$(MAKE) -C contrib/gp_distribution_policy $@
	$(MAKE) -C contrib/gp_inject_fault $@
	$(MAKE) -C contrib/gp_internal_tools $@
	$(MAKE) -C contrib/gp_cancel_query $@
	$(MAKE) -C contrib/indexscan $@
	$(MAKE) -C contrib/pg_upgrade_support $@
	$(MAKE) -C contrib/pg_upgrade $@
	$(MAKE) -C contrib/hstore $@
	$(MAKE) -C contrib/pgcrypto $@
# leap over gpAux/Makefile into subdirectories to avoid circular dependency.
# gpAux/Makefile is the entry point for the enterprise build, which ends up
# calling top-level configure and this Makefile
	$(MAKE) -C gpAux/extensions $@
	$(MAKE) -C gpAux/gpperfmon $@
	$(MAKE) -C gpAux/platform $@
	$(MAKE) -C gpMgmt $@
# Garbage from autoconf:
	@rm -rf autom4te.cache/

# Important: distclean `src' last, otherwise Makefile.global
# will be gone too soon.
distclean maintainer-clean:
#	$(MAKE) -C doc $@
	$(MAKE) -C gpAux/extensions $@
	$(MAKE) -C gpAux/gpperfmon $@
	$(MAKE) -C gpAux/platform $@
	$(MAKE) -C contrib $@
	$(MAKE) -C config $@
	$(MAKE) -C gpMgmt $@
	$(MAKE) -C src $@
	rm -f config.cache config.log config.status GNUmakefile
# Garbage from autoconf:
	@rm -rf autom4te.cache/

# This is a top-level target that runs "all" regression test suites against
# a running server. This is what the CI pipeline runs.
installcheck-world:
	$(MAKE) -C src/test installcheck-good
	$(MAKE) -C src/test/fsync install && $(MAKE) -C src/test/fsync installcheck
	$(MAKE) -C src/test/walrep install && $(MAKE) -C src/test/walrep installcheck
	$(MAKE) -C src/test/heap_checksum install && $(MAKE) -C src/test/heap_checksum installcheck
	$(MAKE) -C src/test/isolation installcheck
	$(MAKE) -C src/test/isolation2 installcheck
	$(MAKE) -C src/pl installcheck
	#$(MAKE) -C src/interfaces/ecpg installcheck
	#$(MAKE) -C contrib installcheck
	$(MAKE) -C contrib/formatter_fixedwidth installcheck
	$(MAKE) -C contrib/extprotocol installcheck
	$(MAKE) -C contrib/dblink installcheck
	$(MAKE) -C contrib/indexscan installcheck
	$(MAKE) -C contrib/hstore installcheck
	$(MAKE) -C contrib/pgcrypto installcheck
	$(MAKE) -C gpAux/extensions installcheck
	$(MAKE) -C src/bin/gpfdist installcheck
	$(MAKE) -C src/interfaces/gppc installcheck
	$(MAKE) -C src/test/kerberos installcheck
	$(MAKE) -C gpMgmt/bin installcheck
	gpcheckcat -A
	# Verify the filesystem objects are consistent between primary and mirror
	$(MAKE) -C contrib/gp_replica_check installcheck

	$(MAKE) -C contrib/pg_upgrade check

installcheck-resgroup:
	$(MAKE) -C src/test/isolation2 $@

# Create or destory a demo cluster.
create-demo-cluster:
	$(MAKE) -C gpAux/gpdemo create-demo-cluster

destroy-demo-cluster:
	$(MAKE) -C gpAux/gpdemo destroy-demo-cluster

create-tinc-test-cluster: destroy-demo-cluster
	$(MAKE) -C gpAux/gpdemo DEFAULT_QD_MAX_CONNECT=150 NUM_PRIMARY_MIRROR_PAIRS=2
	. gpAux/gpdemo/gpdemo-env.sh && createdb gptest

# Run mock tests, that don't require a running server. Arguably these should
# be part of [install]check-world, but we treat them more like part of
# compilation than regression testing, in the CI. But they are too heavy-weight
# to put into "make all", either.
.PHONY : unittest-check
unittest-check:
	$(MAKE) -C src/backend unittest-check
	$(MAKE) -C src/bin unittest-check
	$(MAKE) -C gpAux/extensions unittest-check

GNUmakefile: GNUmakefile.in $(top_builddir)/config.status
	./config.status $@


##########################################################################

distdir	= postgresql-$(VERSION)
dummy	= =install=
garbage = =*  "#"*  ."#"*  *~*  *.orig  *.rej  core  postgresql-*

dist: $(distdir).tar.gz $(distdir).tar.bz2
	rm -rf $(distdir)

$(distdir).tar: distdir
	$(TAR) chf $@ $(distdir)

.INTERMEDIATE: $(distdir).tar

distdir-location:
	@echo $(distdir)

distdir:
	rm -rf $(distdir)* $(dummy)
	for x in `cd $(top_srcdir) && find . \( -name CVS -prune \) -o \( -name .git -prune \) -o -print`; do \
	  file=`expr X$$x : 'X\./\(.*\)'`; \
	  if test -d "$(top_srcdir)/$$file" ; then \
	    mkdir "$(distdir)/$$file" && chmod 777 "$(distdir)/$$file";	\
	  else \
	    ln "$(top_srcdir)/$$file" "$(distdir)/$$file" >/dev/null 2>&1 \
	      || cp "$(top_srcdir)/$$file" "$(distdir)/$$file"; \
	  fi || exit; \
	done
	$(MAKE) -C $(distdir) distprep
	#$(MAKE) -C $(distdir)/doc/src/sgml/ HISTORY INSTALL regress_README
	#cp $(distdir)/doc/src/sgml/HISTORY $(distdir)/
	#cp $(distdir)/doc/src/sgml/INSTALL $(distdir)/
	#cp $(distdir)/doc/src/sgml/regress_README $(distdir)/src/test/regress/README
	$(MAKE) -C $(distdir) distclean
	#rm -f $(distdir)/README.git

distcheck: dist
	rm -rf $(dummy)
	mkdir $(dummy)
	$(GZIP) -d -c $(distdir).tar.gz | $(TAR) xf -
	install_prefix=`cd $(dummy) && pwd`; \
	cd $(distdir) \
	&& ./configure --prefix="$$install_prefix"
	$(MAKE) -C $(distdir) -q distprep
	$(MAKE) -C $(distdir)
	$(MAKE) -C $(distdir) install
	$(MAKE) -C $(distdir) uninstall
	@echo "checking whether \`$(MAKE) uninstall' works"
	test `find $(dummy) ! -type d | wc -l` -eq 0
	$(MAKE) -C $(distdir) dist
# Room for improvement: Check here whether this distribution tarball
# is sufficiently similar to the original one.
	rm -rf $(distdir) $(dummy)
	@echo "Distribution integrity checks out."

.PHONY: dist distdir distcheck docs install-docs
